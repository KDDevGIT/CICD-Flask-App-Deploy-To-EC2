name: CI/CD (Flask â†’ EC2)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write   # allow pushing to GHCR from Actions

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}  # ghcr.io/owner/repo
  CONTAINER_NAME: week20-flask
  CONTAINER_PORT: 8000
  HOST_PORT: 80

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -q

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .

      - name: Push image
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to EC2 (pull & restart container)
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          CONTAINER_PORT: ${{ env.CONTAINER_PORT }}
          HOST_PORT: ${{ env.HOST_PORT }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          REMOTE="${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}"
          # Create a small deploy script executed remotely via SSH
          ssh -o StrictHostKeyChecking=no -i key.pem "$REMOTE" bash -s << 'EOF'
            set -euo pipefail

            # Ensure Docker is installed (Amazon Linux/Ubuntu compatibility)
            if ! command -v docker >/dev/null 2>&1; then
              if [ -f /etc/os-release ]; then
                . /etc/os-release
                if [[ "$ID" == "amzn" ]]; then
                  sudo yum update -y
                  sudo yum install -y docker
                  sudo systemctl enable --now docker
                  sudo usermod -aG docker $USER || true
                elif [[ "$ID" == "ubuntu" ]]; then
                  sudo apt-get update -y
                  sudo apt-get install -y docker.io
                  sudo systemctl enable --now docker
                  sudo usermod -aG docker $USER || true
                fi
              fi
            fi

            # Log in to GHCR to pull the image
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

            # Pull latest image
            docker pull "${IMAGE_NAME}:latest"

            # Stop & remove any previous container
            docker rm -f "${CONTAINER_NAME}" 2>/dev/null || true

            # Run container on port 80 -> 8000 in container
            docker run -d --name "${CONTAINER_NAME}" -p ${HOST_PORT}:${CONTAINER_PORT} \
              --restart unless-stopped "${IMAGE_NAME}:latest"

            # Optional: basic health check
            sleep 2
            curl -fsS http://localhost:${HOST_PORT}/health || (echo "Health check failed" && exit 1)
          EOF
